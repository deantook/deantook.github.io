import{_ as t,c as i,o as r,ah as a}from"./chunks/framework.D3s0AgZG.js";const g=JSON.parse('{"title":"🌐 跨平台开发概览（Flutter / KMP / .NET MAUI）","description":"","frontmatter":{},"headers":[],"relativePath":"src/客户端开发/客户端开发概述/跨平台开发/概览.md","filePath":"src/客户端开发/客户端开发概述/跨平台开发/概览.md"}'),d={name:"src/客户端开发/客户端开发概述/跨平台开发/概览.md"};function o(n,l,e,s,u,p){return r(),i("div",null,[...l[0]||(l[0]=[a('<h1 id="🌐-跨平台开发概览-flutter-kmp-net-maui" tabindex="-1">🌐 跨平台开发概览（Flutter / KMP / .NET MAUI） <a class="header-anchor" href="#🌐-跨平台开发概览-flutter-kmp-net-maui" aria-label="Permalink to “🌐 跨平台开发概览（Flutter / KMP / .NET MAUI）”">​</a></h1><h2 id="_1️⃣-什么是跨平台开发" tabindex="-1">1️⃣ 什么是跨平台开发？ <a class="header-anchor" href="#_1️⃣-什么是跨平台开发" aria-label="Permalink to “1️⃣ 什么是跨平台开发？”">​</a></h2><ul><li><p><strong>概念</strong>：</p><ul><li>通过一套代码同时生成多个平台的应用（iOS / Android / Web / Desktop），减少重复开发。</li></ul></li><li><p><strong>目标</strong>：</p><ul><li>代码复用率高</li><li>开发效率提升</li><li>跨平台一致性体验</li></ul></li></ul><h2 id="_2️⃣-主流跨平台方案" tabindex="-1">2️⃣ 主流跨平台方案 <a class="header-anchor" href="#_2️⃣-主流跨平台方案" aria-label="Permalink to “2️⃣ 主流跨平台方案”">​</a></h2><h3 id="_2-1-flutter" tabindex="-1">2.1 Flutter <a class="header-anchor" href="#_2-1-flutter" aria-label="Permalink to “2.1 Flutter”">​</a></h3><ul><li><p><strong>原理</strong>：</p><ul><li><strong>Dart 语言 + 自绘 UI（Skia 引擎）</strong></li><li>Flutter 控件自己渲染界面，而不是使用原生控件</li></ul></li><li><p><strong>支持平台</strong>：</p><ul><li>Android / iOS / Web / Windows / macOS / Linux</li></ul></li><li><p><strong>优点</strong>：</p><ul><li>高性能（GPU 加速渲染）</li><li>UI 一致性强</li><li>丰富插件生态，支持原生扩展</li><li>热重载开发效率高</li></ul></li><li><p><strong>缺点</strong>：</p><ul><li>App 包体积大</li><li>对原生控件定制可能需要桥接</li></ul></li><li><p><strong>适合场景</strong>：</p><ul><li>移动端主应用、桌面和 Web 的轻量跨平台</li></ul></li></ul><h3 id="_2-2-kotlin-multiplatform-kmp" tabindex="-1">2.2 Kotlin Multiplatform (KMP) <a class="header-anchor" href="#_2-2-kotlin-multiplatform-kmp" aria-label="Permalink to “2.2 Kotlin Multiplatform (KMP)”">​</a></h3><ul><li><p><strong>原理</strong>：</p><ul><li>Kotlin 共享 <strong>业务逻辑和数据层</strong>，UI 层依然原生</li><li>Android：Kotlin / iOS：Swift / Web：Kotlin/JS</li></ul></li><li><p><strong>特点</strong>：</p><ul><li>共享网络请求、数据库、业务逻辑</li><li>UI 保留原生，性能原生</li></ul></li><li><p><strong>优点</strong>：</p><ul><li>共享核心逻辑，原生 UI</li><li>原生性能和体验保持</li></ul></li><li><p><strong>缺点</strong>：</p><ul><li>只能共享逻辑，UI 层仍需原生开发</li><li>学习曲线稍高，跨平台优势有限</li></ul></li><li><p><strong>适合场景</strong>：</p><ul><li>大型项目，原生 UI 必须保留，但希望共享逻辑</li></ul></li></ul><h3 id="_2-3-net-maui-multi-platform-app-ui" tabindex="-1">2.3 .NET MAUI (Multi-platform App UI) <a class="header-anchor" href="#_2-3-net-maui-multi-platform-app-ui" aria-label="Permalink to “2.3 .NET MAUI (Multi-platform App UI)”">​</a></h3><ul><li><p><strong>原理</strong>：</p><ul><li>C# + XAML 构建 UI</li><li>抽象原生控件，在各端渲染原生或自绘</li></ul></li><li><p><strong>支持平台</strong>：</p><ul><li>Android / iOS / Windows / macOS</li></ul></li><li><p><strong>优点</strong>：</p><ul><li>Microsoft 生态，适合企业级应用</li><li>单一 C# 代码库，跨平台 UI</li></ul></li><li><p><strong>缺点</strong>：</p><ul><li>移动端生态不如 Flutter 丰富</li><li>框架更新速度慢</li></ul></li><li><p><strong>适合场景</strong>：</p><ul><li>企业内部管理系统，Windows + 移动端统一开发</li></ul></li></ul><h2 id="_3️⃣-跨平台开发对比" tabindex="-1">3️⃣ 跨平台开发对比 <a class="header-anchor" href="#_3️⃣-跨平台开发对比" aria-label="Permalink to “3️⃣ 跨平台开发对比”">​</a></h2><table tabindex="0"><thead><tr><th>特性</th><th>Flutter</th><th>KMP</th><th>.NET MAUI</th></tr></thead><tbody><tr><td>语言</td><td>Dart</td><td>Kotlin</td><td>C#</td></tr><tr><td>UI 渲染</td><td>自绘控件（Skia）</td><td>原生控件</td><td>抽象控件 / 原生渲染</td></tr><tr><td>跨平台能力</td><td>高（移动 + Web + Desktop）</td><td>中（逻辑共享，UI 原生）</td><td>高（移动 + Desktop）</td></tr><tr><td>性能</td><td>高</td><td>原生（UI 原生）</td><td>高（依赖平台）</td></tr><tr><td>热重载</td><td>✅ 强大</td><td>❌ 原生依赖</td><td>✅ 支持部分</td></tr><tr><td>插件生态</td><td>丰富</td><td>依赖社区 + 原生</td><td>较少</td></tr><tr><td>学习曲线</td><td>中等</td><td>高（需要掌握多平台 UI）</td><td>中等</td></tr><tr><td>适合场景</td><td>App、Web、桌面跨平台</td><td>大型原生 App 逻辑共享</td><td>企业应用、微软生态</td></tr></tbody></table><h2 id="_4️⃣-服务端工程师切入点" tabindex="-1">4️⃣ 服务端工程师切入点 <a class="header-anchor" href="#_4️⃣-服务端工程师切入点" aria-label="Permalink to “4️⃣ 服务端工程师切入点”">​</a></h2><ul><li><p><strong>Flutter</strong>：</p><ul><li>类似前端 + 移动端混合能力</li><li>自绘 UI，关注业务逻辑和状态管理即可</li></ul></li><li><p><strong>KMP</strong>：</p><ul><li>可以复用现有 Kotlin 后端逻辑（如业务规则、网络层）</li><li>UI 仍需原生知识</li></ul></li><li><p><strong>.NET MAUI</strong>：</p><ul><li>如果熟悉 C# 或微软生态，快速上手</li><li>更适合企业级统一平台应用</li></ul></li></ul><p>💡 <strong>核心启示</strong>：</p><ol><li>Flutter = “全端跨平台 + 自绘 UI + 高性能”</li><li>KMP = “共享逻辑，原生 UI”</li><li>.NET MAUI = “微软生态跨平台 UI”</li></ol>',16)])])}const m=t(d,[["render",o]]);export{g as __pageData,m as default};
