import{_ as e,c as d,o as i,af as a}from"./chunks/framework.Dxic3Z6b.js";const u=JSON.parse('{"title":"📖 客户端开发通识：App 生命周期与页面生命周期","description":"","frontmatter":{},"headers":[],"relativePath":"src/客户端开发/通识/App生命周期与页面生命周期.md","filePath":"src/客户端开发/通识/App生命周期与页面生命周期.md"}'),o={name:"src/客户端开发/通识/App生命周期与页面生命周期.md"};function r(l,t,n,p,c,s){return i(),d("div",null,[...t[0]||(t[0]=[a('<p>明白，我们接着讲 <strong>App 生命周期与页面生命周期</strong>，这是理解客户端 UI 渲染和事件循环的自然延伸，也是 Flutter Widget 生命周期的基础。</p><h1 id="📖-客户端开发通识-app-生命周期与页面生命周期" tabindex="-1">📖 客户端开发通识：App 生命周期与页面生命周期 <a class="header-anchor" href="#📖-客户端开发通识-app-生命周期与页面生命周期" aria-label="Permalink to “📖 客户端开发通识：App 生命周期与页面生命周期”">​</a></h1><h2 id="_1️⃣-app-生命周期-application-lifecycle" tabindex="-1">1️⃣ App 生命周期（Application Lifecycle） <a class="header-anchor" href="#_1️⃣-app-生命周期-application-lifecycle" aria-label="Permalink to “1️⃣ App 生命周期（Application Lifecycle）”">​</a></h2><h3 id="_1-1-基本概念" tabindex="-1">1.1 基本概念 <a class="header-anchor" href="#_1-1-基本概念" aria-label="Permalink to “1.1 基本概念”">​</a></h3><ul><li><p><strong>App 生命周期</strong>：应用从启动到退出的整个过程，包括前后台切换、被系统杀死、恢复等状态。</p></li><li><p><strong>核心目标</strong>：</p><ul><li>管理资源（CPU、内存、网络）</li><li>保存/恢复用户状态</li><li>响应系统事件（如来电、锁屏、低内存）</li></ul></li></ul><h3 id="_1-2-各平台的-app-生命周期" tabindex="-1">1.2 各平台的 App 生命周期 <a class="header-anchor" href="#_1-2-各平台的-app-生命周期" aria-label="Permalink to “1.2 各平台的 App 生命周期”">​</a></h3><table tabindex="0"><thead><tr><th>平台</th><th>生命周期关键阶段</th><th>说明</th></tr></thead><tbody><tr><td>Android</td><td><code>onCreate → onStart → onResume → onPause → onStop → onDestroy</code></td><td><code>onResume</code> 活跃，<code>onPause/onStop</code> 暂停后台</td></tr><tr><td>iOS</td><td><code>didFinishLaunching → willEnterForeground → didBecomeActive → willResignActive → didEnterBackground → willTerminate</code></td><td>前后台切换、系统杀死事件</td></tr><tr><td>Flutter</td><td><code>WidgetsBindingObserver</code> (<code>AppLifecycleState</code>)</td><td><code>resumed / inactive / paused / detached</code> 对应前后台状态</td></tr></tbody></table><p><strong>核心理解</strong>：</p><ul><li>App 生命周期关注 <strong>前后台切换与资源管理</strong></li><li>Flutter 中通过 <code>WidgetsBindingObserver</code> 监听 App 状态，与原生生命周期映射</li></ul><h2 id="_2️⃣-页面生命周期-page-activity-viewcontroller" tabindex="-1">2️⃣ 页面生命周期（Page / Activity / ViewController） <a class="header-anchor" href="#_2️⃣-页面生命周期-page-activity-viewcontroller" aria-label="Permalink to “2️⃣ 页面生命周期（Page / Activity / ViewController）”">​</a></h2><h3 id="_2-1-基本概念" tabindex="-1">2.1 基本概念 <a class="header-anchor" href="#_2-1-基本概念" aria-label="Permalink to “2.1 基本概念”">​</a></h3><ul><li><strong>页面生命周期</strong>：单个页面从创建到销毁的过程，管理 UI 状态和事件监听。</li></ul><h3 id="_2-2-各平台页面生命周期" tabindex="-1">2.2 各平台页面生命周期 <a class="header-anchor" href="#_2-2-各平台页面生命周期" aria-label="Permalink to “2.2 各平台页面生命周期”">​</a></h3><table tabindex="0"><thead><tr><th>平台</th><th>生命周期关键阶段</th><th>对 Flutter 的对应</th></tr></thead><tbody><tr><td>Android</td><td><code>onCreate → onStart → onResume → onPause → onStop → onDestroy</code></td><td><code>StatefulWidget</code> 的 <code>initState → didChangeDependencies → build → deactivate → dispose</code></td></tr><tr><td>iOS</td><td><code>viewDidLoad → viewWillAppear → viewDidAppear → viewWillDisappear → viewDidDisappear → deinit</code></td><td>同上</td></tr><tr><td>Flutter</td><td><code>initState → didChangeDependencies → build → deactivate → dispose</code></td><td>页面 Widget 生命周期完全由框架管理</td></tr></tbody></table><h3 id="_2-3-页面生命周期核心原则" tabindex="-1">2.3 页面生命周期核心原则 <a class="header-anchor" href="#_2-3-页面生命周期核心原则" aria-label="Permalink to “2.3 页面生命周期核心原则”">​</a></h3><ol><li><p><strong>初始化阶段</strong> (<code>onCreate</code> / <code>viewDidLoad</code> / <code>initState</code>)</p><ul><li>初始化数据、绑定事件、启动异步任务</li></ul></li><li><p><strong>可见阶段</strong> (<code>onResume</code> / <code>viewDidAppear</code> / <code>build</code>)</p><ul><li>页面处于前台，用户可交互</li></ul></li><li><p><strong>暂停阶段</strong> (<code>onPause</code> / <code>viewWillDisappear</code>)</p><ul><li>页面被遮挡或切换到后台，可暂停动画或网络请求</li></ul></li><li><p><strong>销毁阶段</strong> (<code>onDestroy</code> / <code>deinit</code> / <code>dispose</code>)</p><ul><li>释放资源，取消订阅和回调</li></ul></li></ol><h2 id="_3️⃣-服务端工程师类比" tabindex="-1">3️⃣ 服务端工程师类比 <a class="header-anchor" href="#_3️⃣-服务端工程师类比" aria-label="Permalink to “3️⃣ 服务端工程师类比”">​</a></h2><table tabindex="0"><thead><tr><th>概念</th><th>服务端类比</th></tr></thead><tbody><tr><td>App 生命周期</td><td>服务启动 → 请求处理 → 休眠 / 停机</td></tr><tr><td>页面生命周期</td><td>请求处理单元（Controller/Handler）生命周期</td></tr><tr><td>初始化阶段</td><td>请求初始化、数据库连接</td></tr><tr><td>可见阶段</td><td>正在处理请求</td></tr><tr><td>暂停阶段</td><td>请求等待 / 异步 IO</td></tr><tr><td>销毁阶段</td><td>请求结束、资源释放</td></tr></tbody></table><p>💡 <strong>核心启示</strong>：</p><ul><li><p><strong>UI 生命周期管理 = 资源管理 + 状态管理</strong></p></li><li><p>Flutter 的 Widget 生命周期是对原生生命周期的抽象，但逻辑类似</p></li><li><p>理解生命周期能帮助你：</p><ul><li>避免内存泄漏</li><li>正确管理异步任务</li><li>保证 UI 和数据一致性</li></ul></li></ul><p>如果你愿意，我可以接着帮你讲 <strong>客户端状态管理（与服务端 stateless 对比）</strong>，这是理解 Flutter 状态管理的关键前置知识。</p><p>是否继续？</p>',22)])])}const _=e(o,[["render",r]]);export{u as __pageData,_ as default};
