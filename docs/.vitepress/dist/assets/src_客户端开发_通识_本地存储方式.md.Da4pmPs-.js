import{_ as t,c as s,o as a,ah as l}from"./chunks/framework.D3s0AgZG.js";const g=JSON.parse('{"title":"📖 客户端开发通识：本地存储方式","description":"","frontmatter":{},"headers":[],"relativePath":"src/客户端开发/通识/本地存储方式.md","filePath":"src/客户端开发/通识/本地存储方式.md"}'),e={name:"src/客户端开发/通识/本地存储方式.md"};function h(d,i,r,n,k,p){return a(),s("div",null,[...i[0]||(i[0]=[l(`<h1 id="📖-客户端开发通识-本地存储方式" tabindex="-1">📖 客户端开发通识：本地存储方式 <a class="header-anchor" href="#📖-客户端开发通识-本地存储方式" aria-label="Permalink to “📖 客户端开发通识：本地存储方式”">​</a></h1><h2 id="_1️⃣-本地存储的概念" tabindex="-1">1️⃣ 本地存储的概念 <a class="header-anchor" href="#_1️⃣-本地存储的概念" aria-label="Permalink to “1️⃣ 本地存储的概念”">​</a></h2><ul><li><p><strong>本地存储</strong>：客户端在设备上存储数据，以便应用重启后仍能访问或离线使用。</p></li><li><p><strong>作用</strong>：</p><ol><li>保存用户偏好设置（主题、语言）</li><li>缓存数据（接口响应、图片）</li><li>离线访问（断网场景）</li><li>提升性能（减少重复网络请求）</li></ol></li></ul><h2 id="_2️⃣-存储方式分类" tabindex="-1">2️⃣ 存储方式分类 <a class="header-anchor" href="#_2️⃣-存储方式分类" aria-label="Permalink to “2️⃣ 存储方式分类”">​</a></h2><table tabindex="0"><thead><tr><th>类型</th><th>说明</th><th>优点</th><th>缺点</th><th>对应 Flutter 插件</th></tr></thead><tbody><tr><td><strong>KV 存储（Key-Value）</strong></td><td>键值对形式存储小型数据</td><td>简单、轻量</td><td>不适合复杂结构</td><td><code>shared_preferences</code></td></tr><tr><td><strong>关系型数据库</strong></td><td>类 SQL 数据库，表结构存储数据</td><td>支持复杂查询、事务</td><td>较重，初次学习成本高</td><td><code>sqflite</code></td></tr><tr><td><strong>NoSQL / 本地对象存储</strong></td><td>面向对象或文档存储</td><td>灵活、高性能</td><td>查询复杂度高</td><td><code>hive</code>、<code>objectbox</code></td></tr><tr><td><strong>文件存储</strong></td><td>保存文件（图片、日志、缓存）</td><td>灵活，可存大文件</td><td>不便于查询结构化数据</td><td><code>path_provider</code> + Dart IO</td></tr><tr><td><strong>加密存储</strong></td><td>存储敏感信息（Token、密码）</td><td>安全</td><td>需管理加密逻辑</td><td><code>flutter_secure_storage</code></td></tr></tbody></table><h2 id="_3️⃣-各平台本地存储对应" tabindex="-1">3️⃣ 各平台本地存储对应 <a class="header-anchor" href="#_3️⃣-各平台本地存储对应" aria-label="Permalink to “3️⃣ 各平台本地存储对应”">​</a></h2><table tabindex="0"><thead><tr><th>平台</th><th>KV</th><th>数据库</th><th>文件</th><th>备注</th></tr></thead><tbody><tr><td>Android</td><td>SharedPreferences</td><td>SQLite / Room</td><td>Internal / External Storage</td><td>权限管理注意外部存储</td></tr><tr><td>iOS</td><td>UserDefaults</td><td>CoreData / SQLite</td><td>沙箱 Documents / tmp / Library</td><td>沙箱机制限制访问</td></tr><tr><td>Flutter</td><td>shared_preferences</td><td>sqflite / drift</td><td>path_provider + 文件 API</td><td>插件统一封装原生 API</td></tr></tbody></table><h2 id="_4️⃣-使用场景示例" tabindex="-1">4️⃣ 使用场景示例 <a class="header-anchor" href="#_4️⃣-使用场景示例" aria-label="Permalink to “4️⃣ 使用场景示例”">​</a></h2><ol><li><p><strong>KV 存储</strong></p><ul><li><p>保存开关状态、主题模式、语言偏好</p></li><li><p>Flutter 示例：</p><div class="language-dart"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">final</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> prefs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> SharedPreferences</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> prefs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setBool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;darkMode&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">bool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> isDark </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> prefs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getBool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;darkMode&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">??</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div></li></ul></li><li><p><strong>关系型数据库</strong></p><ul><li>保存购物车列表、用户笔记</li><li>支持事务、复杂查询、数据关联</li></ul></li><li><p><strong>NoSQL / 对象存储</strong></p><ul><li><p>高速缓存用户数据，支持对象直接序列化存储</p></li><li><p>Hive 示例：</p><div class="language-dart"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> box </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Hive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">openBox</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;myBox&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">box.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">put</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;username&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Alice&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> box.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;username&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div></li></ul></li><li><p><strong>文件存储</strong></p><ul><li>存储图片、下载文件、日志文件</li><li>通过 <code>path_provider</code> 获取沙箱路径，使用 Dart IO 读写</li></ul></li><li><p><strong>加密存储</strong></p><ul><li>保存敏感信息，如 Token、密码</li><li>使用平台安全存储或加密库，保证安全性</li></ul></li></ol><h2 id="_5️⃣-服务端工程师类比" tabindex="-1">5️⃣ 服务端工程师类比 <a class="header-anchor" href="#_5️⃣-服务端工程师类比" aria-label="Permalink to “5️⃣ 服务端工程师类比”">​</a></h2><table tabindex="0"><thead><tr><th>客户端存储</th><th>服务端类比</th></tr></thead><tbody><tr><td>KV / UserDefaults / SharedPreferences</td><td>Redis / 配置文件</td></tr><tr><td>SQLite / CoreData / sqflite</td><td>数据库（MySQL / PostgreSQL）</td></tr><tr><td>文件存储</td><td>日志文件、缓存文件</td></tr><tr><td>加密存储</td><td>密码哈希、密钥存储</td></tr></tbody></table><p>💡 <strong>核心启示</strong>：</p><ul><li>本地存储是客户端状态管理的持久化手段</li><li>根据数据结构、访问频率、敏感性选择存储方案</li><li>Flutter 提供统一插件封装，大幅降低跨平台差异的复杂度</li></ul>`,13)])])}const E=t(e,[["render",h]]);export{g as __pageData,E as default};
