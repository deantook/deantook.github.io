import{_ as i,c as r,o as e,ah as l}from"./chunks/framework.D3s0AgZG.js";const p=JSON.parse('{"title":"📖 原生移动开发概览","description":"","frontmatter":{},"headers":[],"relativePath":"src/客户端开发/客户端开发概述/原生开发/概览.md","filePath":"src/客户端开发/客户端开发概述/原生开发/概览.md"}'),a={name:"src/客户端开发/客户端开发概述/原生开发/概览.md"};function o(n,t,s,d,g,c){return e(),r("div",null,[...t[0]||(t[0]=[l('<h1 id="📖-原生移动开发概览" tabindex="-1">📖 原生移动开发概览 <a class="header-anchor" href="#📖-原生移动开发概览" aria-label="Permalink to “📖 原生移动开发概览”">​</a></h1><h2 id="_1️⃣-android-原生开发-java-kotlin" tabindex="-1">1️⃣ Android 原生开发（Java / Kotlin） <a class="header-anchor" href="#_1️⃣-android-原生开发-java-kotlin" aria-label="Permalink to “1️⃣ Android 原生开发（Java / Kotlin）”">​</a></h2><h3 id="基础概念" tabindex="-1">基础概念 <a class="header-anchor" href="#基础概念" aria-label="Permalink to “基础概念”">​</a></h3><ul><li><p><strong>Android 是基于 Linux 内核的操作系统</strong>，应用运行在 <strong>ART（Android Runtime）</strong> 上。</p></li><li><p>应用主要由 <strong>Activity、Fragment、Service、BroadcastReceiver、ContentProvider</strong> 构成。</p><ul><li><strong>Activity</strong>：界面组件，相当于一个“页面”。</li><li><strong>Fragment</strong>：可重用的 UI 组件。</li><li><strong>Service</strong>：后台任务。</li><li><strong>BroadcastReceiver</strong>：监听系统或应用广播。</li><li><strong>ContentProvider</strong>：提供数据共享接口。</li></ul></li></ul><h3 id="语言选择" tabindex="-1">语言选择 <a class="header-anchor" href="#语言选择" aria-label="Permalink to “语言选择”">​</a></h3><ul><li><strong>Java</strong>：传统语言，生态成熟，示例代码广。</li><li><strong>Kotlin</strong>：现代语言，简洁、安全，官方推荐，和 Java 互操作性好。</li></ul><h3 id="核心概念" tabindex="-1">核心概念 <a class="header-anchor" href="#核心概念" aria-label="Permalink to “核心概念”">​</a></h3><ol><li><p><strong>生命周期</strong></p><ul><li>Activity: <code>onCreate → onStart → onResume → onPause → onStop → onDestroy</code></li><li>理解生命周期有助于处理资源释放、异步任务、状态保存。</li></ul></li><li><p><strong>布局</strong></p><ul><li>XML 布局文件定义界面。</li><li>常用布局：LinearLayout、RelativeLayout、ConstraintLayout。</li></ul></li><li><p><strong>事件处理</strong></p><ul><li>按钮点击：<code>button.setOnClickListener { }</code></li><li>UI 操作必须在主线程（Main Thread）。</li></ul></li><li><p><strong>数据存储</strong></p><ul><li><strong>SharedPreferences</strong>：KV 存储。</li><li><strong>SQLite / Room</strong>：本地数据库。</li><li><strong>文件存储</strong>：内部存储 / 外部存储。</li></ul></li></ol><h3 id="构建与发布" tabindex="-1">构建与发布 <a class="header-anchor" href="#构建与发布" aria-label="Permalink to “构建与发布”">​</a></h3><ul><li><strong>Gradle</strong>：Android 的构建工具，负责依赖管理、打包、混淆。</li><li><strong>签名 APK / AAB</strong> → 上传 <strong>Google Play</strong>。</li></ul><h2 id="_2️⃣-ios-原生开发-objective-c-swift" tabindex="-1">2️⃣ iOS 原生开发（Objective-C / Swift） <a class="header-anchor" href="#_2️⃣-ios-原生开发-objective-c-swift" aria-label="Permalink to “2️⃣ iOS 原生开发（Objective-C / Swift）”">​</a></h2><h3 id="基础概念-1" tabindex="-1">基础概念 <a class="header-anchor" href="#基础概念-1" aria-label="Permalink to “基础概念”">​</a></h3><ul><li><p>iOS 应用运行在 <strong>iOS 操作系统</strong>，基于 <strong>Cocoa Touch 框架</strong>。</p></li><li><p>核心组件：</p><ul><li><strong>UIViewController</strong>：界面控制器，相当于 Activity。</li><li><strong>UIView</strong>：界面元素。</li><li><strong>UIApplicationDelegate</strong>：应用生命周期管理。</li><li><strong>Service / Background Tasks</strong>：后台任务处理。</li></ul></li></ul><h3 id="语言选择-1" tabindex="-1">语言选择 <a class="header-anchor" href="#语言选择-1" aria-label="Permalink to “语言选择”">​</a></h3><ul><li><strong>Objective-C</strong>：历史悠久，成熟。</li><li><strong>Swift</strong>：现代语言，安全、简洁，官方推荐。</li></ul><h3 id="核心概念-1" tabindex="-1">核心概念 <a class="header-anchor" href="#核心概念-1" aria-label="Permalink to “核心概念”">​</a></h3><ol><li><p><strong>生命周期</strong></p><ul><li>UIViewController: <code>viewDidLoad → viewWillAppear → viewDidAppear → viewWillDisappear → viewDidDisappear → deinit</code></li><li>UIApplicationDelegate 管理整个应用生命周期。</li></ul></li><li><p><strong>布局</strong></p><ul><li><strong>Storyboard / XIB</strong>：可视化界面设计。</li><li><strong>SwiftUI</strong>：声明式 UI，类似 Flutter。</li></ul></li><li><p><strong>事件处理</strong></p><ul><li>UI 控件通过 <strong>IBAction / target-action</strong> 响应事件。</li><li>主线程处理 UI。</li></ul></li><li><p><strong>数据存储</strong></p><ul><li><strong>UserDefaults</strong>：KV 存储。</li><li><strong>CoreData / SQLite</strong>：本地数据库。</li><li><strong>文件存储</strong>：沙箱目录。</li></ul></li></ol><h3 id="构建与发布-1" tabindex="-1">构建与发布 <a class="header-anchor" href="#构建与发布-1" aria-label="Permalink to “构建与发布”">​</a></h3><ul><li><strong>Xcode</strong>：开发、构建、调试。</li><li><strong>签名 &amp; Provisioning Profile</strong> → 上传 <strong>App Store</strong>。</li></ul><h2 id="_3️⃣-原生开发对-flutter-的启发" tabindex="-1">3️⃣ 原生开发对 Flutter 的启发 <a class="header-anchor" href="#_3️⃣-原生开发对-flutter-的启发" aria-label="Permalink to “3️⃣ 原生开发对 Flutter 的启发”">​</a></h2><table tabindex="0"><thead><tr><th>原生概念</th><th>Flutter 对应</th></tr></thead><tbody><tr><td>Activity / UIViewController</td><td>Widget 树的顶层 Widget（MaterialApp / CupertinoApp）</td></tr><tr><td>Fragment / UIView</td><td>单个 Widget 或组合 Widget</td></tr><tr><td>生命周期</td><td>Widget 生命周期（initState, dispose） + App 生命周期</td></tr><tr><td>SharedPreferences / UserDefaults</td><td>shared_preferences 插件</td></tr><tr><td>SQLite / CoreData</td><td>sqflite 插件</td></tr><tr><td>UI 布局（XML / Storyboard）</td><td>Flutter 的 Widget 树布局（Row/Column/Stack）</td></tr></tbody></table><p>💡 <strong>核心思路</strong>：原生开发理解的是“组件 + 生命周期 + 数据管理”，Flutter 将这些抽象成 <strong>Widget + State + 插件</strong>，你只需要熟悉对应关系即可。</p>',22)])])}const u=i(a,[["render",o]]);export{p as __pageData,u as default};
