import{_ as s,c as a,o as t,ah as l}from"./chunks/framework.D3s0AgZG.js";const g=JSON.parse('{"title":"📖 客户端开发通识：网络特点","description":"","frontmatter":{},"headers":[],"relativePath":"src/客户端开发/通识/网络特点.md","filePath":"src/客户端开发/通识/网络特点.md"}'),n={name:"src/客户端开发/通识/网络特点.md"};function e(r,i,h,p,o,d){return t(),a("div",null,[...i[0]||(i[0]=[l(`<h1 id="📖-客户端开发通识-网络特点" tabindex="-1">📖 客户端开发通识：网络特点 <a class="header-anchor" href="#📖-客户端开发通识-网络特点" aria-label="Permalink to “📖 客户端开发通识：网络特点”">​</a></h1><h2 id="_1️⃣-客户端网络环境特点" tabindex="-1">1️⃣ 客户端网络环境特点 <a class="header-anchor" href="#_1️⃣-客户端网络环境特点" aria-label="Permalink to “1️⃣ 客户端网络环境特点”">​</a></h2><ol><li><p><strong>不稳定性</strong></p><ul><li>移动端网络随时可能切换（Wi-Fi ↔ 4G ↔ 5G）</li><li>信号强弱不均，容易出现丢包或延迟</li></ul></li><li><p><strong>断网情况</strong></p><ul><li>用户可能完全断网，应用仍需可用</li><li>需要设计 <strong>离线容错策略</strong></li></ul></li><li><p><strong>高延迟</strong></p><ul><li>相比服务端局域网或云内部网络，移动端网络延迟高且波动大</li></ul></li><li><p><strong>带宽限制</strong></p><ul><li>流量有限，需要控制数据量，支持压缩和分页加载</li></ul></li></ol><p>💡 <strong>理解</strong>：移动端网络的不确定性是客户端设计与服务端不同的重要原因。</p><h2 id="_2️⃣-网络请求策略" tabindex="-1">2️⃣ 网络请求策略 <a class="header-anchor" href="#_2️⃣-网络请求策略" aria-label="Permalink to “2️⃣ 网络请求策略”">​</a></h2><h3 id="_2-1-重试机制-retry" tabindex="-1">2.1 重试机制（Retry） <a class="header-anchor" href="#_2-1-重试机制-retry" aria-label="Permalink to “2.1 重试机制（Retry）”">​</a></h3><ul><li><p><strong>目的</strong>：应对网络瞬断或请求失败</p></li><li><p><strong>实现方式</strong>：</p><ul><li>指数退避（Exponential Backoff）</li><li>限制重试次数</li></ul></li><li><p><strong>Flutter 实现</strong>：<code>dio</code> 或 <code>http</code> + 自定义拦截器</p></li></ul><h3 id="_2-2-超时与取消" tabindex="-1">2.2 超时与取消 <a class="header-anchor" href="#_2-2-超时与取消" aria-label="Permalink to “2.2 超时与取消”">​</a></h3><ul><li><strong>超时</strong>：防止请求长时间阻塞 UI</li><li><strong>取消请求</strong>：用户切换页面或退出操作时取消未完成请求</li><li><strong>Flutter 示例</strong>：<code>dio</code> 支持 <code>CancelToken</code></li></ul><h3 id="_2-3-缓存机制" tabindex="-1">2.3 缓存机制 <a class="header-anchor" href="#_2-3-缓存机制" aria-label="Permalink to “2.3 缓存机制”">​</a></h3><ul><li><p><strong>目的</strong>：减少重复请求，提高离线可用性</p></li><li><p><strong>方式</strong>：</p><ol><li>内存缓存：短期存储，速度快</li><li>本地缓存：SQLite / Hive / SharedPreferences</li><li>HTTP 缓存策略：ETag / Last-Modified</li></ol></li><li><p><strong>Flutter 插件</strong>：<code>dio_http_cache</code>、<code>flutter_cache_manager</code></p></li></ul><h3 id="_2-4-异步处理" tabindex="-1">2.4 异步处理 <a class="header-anchor" href="#_2-4-异步处理" aria-label="Permalink to “2.4 异步处理”">​</a></h3><ul><li><p>所有网络请求必须异步，避免阻塞主线程</p></li><li><p><strong>Flutter/Dart</strong>：</p><div class="language-dart"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Future</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fetchData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    final</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> response </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Dio</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;https://api.example.com/data&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 更新状态</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (e) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 错误处理</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ul><h2 id="_3️⃣-离线优先设计" tabindex="-1">3️⃣ 离线优先设计 <a class="header-anchor" href="#_3️⃣-离线优先设计" aria-label="Permalink to “3️⃣ 离线优先设计”">​</a></h2><ul><li><p><strong>理念</strong>：应用功能尽量不依赖实时网络</p></li><li><p><strong>策略</strong>：</p><ol><li><strong>本地缓存 + 数据同步</strong>：先从本地读取数据，后台同步服务器</li><li><strong>队列异步上传</strong>：用户操作先写本地，网络可用时批量上传</li><li><strong>状态提示</strong>：UI 告知用户离线或同步状态</li></ol></li></ul><h2 id="_4️⃣-服务端工程师类比" tabindex="-1">4️⃣ 服务端工程师类比 <a class="header-anchor" href="#_4️⃣-服务端工程师类比" aria-label="Permalink to “4️⃣ 服务端工程师类比”">​</a></h2><table tabindex="0"><thead><tr><th>客户端网络</th><th>服务端类比</th></tr></thead><tbody><tr><td>断网 / 弱网</td><td>不可靠的第三方服务或异步消息队列</td></tr><tr><td>缓存</td><td>Redis / Memcached / HTTP 缓存</td></tr><tr><td>重试机制</td><td>重试逻辑、幂等接口设计</td></tr><tr><td>异步处理</td><td>异步请求、Future/Promise</td></tr></tbody></table><p>💡 <strong>核心启示</strong>：</p><ul><li>客户端网络设计必须考虑 <strong>不稳定、延迟、离线、缓存</strong></li><li>逻辑上类似服务端对不可靠依赖的处理，但需要更强的用户感知和界面反馈</li><li>Flutter 网络请求结合状态管理、事件循环和生命周期，可以实现高可用和流畅体验</li></ul>`,19)])])}const c=s(n,[["render",e]]);export{g as __pageData,c as default};
