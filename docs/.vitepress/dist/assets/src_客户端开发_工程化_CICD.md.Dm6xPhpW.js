import{_ as i,c as l,o as r,ah as o}from"./chunks/framework.D3s0AgZG.js";const p=JSON.parse('{"title":"🔄 CI/CD：自动化流水线的前世今生","description":"","frontmatter":{},"headers":[],"relativePath":"src/客户端开发/工程化/CICD.md","filePath":"src/客户端开发/工程化/CICD.md"}'),n={name:"src/客户端开发/工程化/CICD.md"};function s(e,t,a,d,g,C){return r(),l("div",null,[...t[0]||(t[0]=[o('<p>好嘞 🚀 CI/CD（持续集成 / 持续交付 / 持续部署）算是 <strong>现代软件工程的基石</strong>，它几乎贯穿所有平台（服务端、客户端、跨平台框架）。 我们来从 <strong>演进历史 → 技术架构 → 实现原理 → 竞品对比 → 趋势总结</strong> 逐层讲解。</p><h1 id="🔄-ci-cd-自动化流水线的前世今生" tabindex="-1">🔄 CI/CD：自动化流水线的前世今生 <a class="header-anchor" href="#🔄-ci-cd-自动化流水线的前世今生" aria-label="Permalink to “🔄 CI/CD：自动化流水线的前世今生”">​</a></h1><h2 id="一、演进历史" tabindex="-1">一、演进历史 <a class="header-anchor" href="#一、演进历史" aria-label="Permalink to “一、演进历史”">​</a></h2><ol><li><p><strong>传统瀑布开发（1990s 之前）</strong></p><ul><li>代码开发周期长，发布频率低（半年甚至几年一次）。</li><li>构建、测试、发布基本靠人工脚本。</li></ul></li><li><p><strong>持续集成概念提出（2000）</strong></p><ul><li><strong>Martin Fowler &amp; Kent Beck</strong> 在敏捷宣言中推广 <strong>CI</strong>。</li><li>核心思想：<strong>频繁集成，早发现问题</strong>。</li><li>代表工具：<strong>CruiseControl（2001）</strong>。</li></ul></li><li><p><strong>CI 工具成熟化（2005–2010）</strong></p><ul><li><strong>Jenkins（2006, 原 Hudson）</strong>：成为事实标准。</li><li>自动化构建、单元测试、报告生成。</li><li>但部署仍是人工，交付周期依旧较慢。</li></ul></li><li><p><strong>CD 概念普及（2010–2015）</strong></p><ul><li><strong>持续交付（Continuous Delivery）</strong>：软件随时可发布到生产环境。</li><li><strong>持续部署（Continuous Deployment）</strong>：软件自动发布到生产（无人工审核）。</li><li>新工具：<strong>Travis CI、CircleCI、GitLab CI</strong>。</li></ul></li><li><p><strong>现代化 CI/CD（2016+）</strong></p><ul><li>云原生 / DevOps 推动 CI/CD 与 <strong>Kubernetes、Docker</strong> 融合。</li><li>工具演进为 <strong>云托管 CI/CD 平台</strong>（GitHub Actions、GitLab CI/CD、Bitrise、Codemagic）。</li><li>客户端领域（iOS/Android/Flutter）CI/CD 成为标配。</li></ul></li></ol><h2 id="二、技术架构" tabindex="-1">二、技术架构 <a class="header-anchor" href="#二、技术架构" aria-label="Permalink to “二、技术架构”">​</a></h2><p>典型 CI/CD 架构可分为 <strong>四层</strong>：</p><ol><li><p><strong>源代码管理层（SCM）</strong></p><ul><li>GitHub / GitLab / Bitbucket</li><li>提交（push）或 PR 触发流水线</li></ul></li><li><p><strong>CI/CD 平台层</strong></p><ul><li>Jenkins、GitHub Actions、GitLab Runner、CircleCI</li><li>提供流水线编排与任务调度</li></ul></li><li><p><strong>执行环境层</strong></p><ul><li>构建代理（Runner/Agent/Worker）</li><li>容器化环境（Docker/Kubernetes）</li><li>支持 iOS/macOS（需要 macOS Runner）、Android/Linux</li></ul></li><li><p><strong>交付层</strong></p><ul><li>产物存储（Artifact Repository：Nexus、JFrog Artifactory）</li><li>应用分发（TestFlight、Google Play、企业分发平台）</li><li>部署环境（K8s 集群 / Web 服务器 / App Store）</li></ul></li></ol><h2 id="三、实现原理" tabindex="-1">三、实现原理 <a class="header-anchor" href="#三、实现原理" aria-label="Permalink to “三、实现原理”">​</a></h2><p>CI/CD 本质是一条 <strong>事件驱动 + 阶段流水线</strong>：</p><ol><li><p><strong>触发（Trigger）</strong></p><ul><li>事件：代码提交、合并请求、定时任务、API 调用。</li><li>例：<code>git push</code> → Webhook → CI/CD 平台触发。</li></ul></li><li><p><strong>构建（Build）</strong></p><ul><li>拉取代码 → 安装依赖 → 编译 → 打包。</li><li>客户端：Gradle（Android）、xcodebuild（iOS）、flutter build。</li><li>服务端：Maven/Gradle/npm/go build。</li></ul></li><li><p><strong>测试（Test）</strong></p><ul><li>单元测试（JUnit、XCTest、flutter test）。</li><li>UI 自动化测试（Espresso、XCUITest、Appium）。</li><li>静态代码检查（Lint、SonarQube）。</li></ul></li><li><p><strong>交付（Delivery）</strong></p><ul><li>生成构建产物：APK、IPA、Docker 镜像、二进制包。</li><li>上传到制品仓库：Nexus、JFrog、pub.dev 私服。</li><li>客户端：上传到 TestFlight / Firebase App Distribution。</li></ul></li><li><p><strong>部署（Deployment）</strong></p><ul><li>自动部署到测试环境 / 预发布环境 / 生产环境。</li><li>Kubernetes 部署、灰度发布、回滚机制。</li><li>对客户端，通常是 <strong>上传到 App Store / Google Play</strong>。</li></ul></li></ol><h2 id="四、竞品对比" tabindex="-1">四、竞品对比 <a class="header-anchor" href="#四、竞品对比" aria-label="Permalink to “四、竞品对比”">​</a></h2><table tabindex="0"><thead><tr><th>工具</th><th>类型</th><th>特点</th><th>适用场景</th></tr></thead><tbody><tr><td><strong>Jenkins</strong> (2006)</td><td>自托管</td><td>插件生态强大，灵活，但配置繁琐</td><td>大企业、传统 IT</td></tr><tr><td><strong>Travis CI</strong> (2011)</td><td>SaaS</td><td>配置简单，早期开源友好</td><td>开源项目（现已没落）</td></tr><tr><td><strong>CircleCI</strong> (2011)</td><td>SaaS</td><td>Docker/K8s 支持好</td><td>云原生项目</td></tr><tr><td><strong>GitLab CI/CD</strong> (2015)</td><td>集成式</td><td>与 GitLab 一体化，支持私有 Runner</td><td>企业私有化部署</td></tr><tr><td><strong>GitHub Actions</strong> (2019)</td><td>集成式</td><td>与 GitHub 紧密结合，支持 Marketplace</td><td>开源 &amp; 商业团队</td></tr><tr><td><strong>Bitrise</strong> (2014)</td><td>SaaS</td><td>专注移动端 CI/CD，支持 iOS/Android</td><td>移动开发团队</td></tr><tr><td><strong>Codemagic</strong> (2018)</td><td>SaaS</td><td>Flutter 专用 CI/CD</td><td>Flutter 开发团队</td></tr><tr><td><strong>Azure DevOps Pipelines</strong></td><td>云服务</td><td>与微软生态集成 (.NET, Windows)</td><td>企业/混合环境</td></tr><tr><td><strong>Bazel + Buildkite</strong></td><td>自托管</td><td>大规模 monorepo 支持</td><td>大厂（Google, Uber）</td></tr></tbody></table><h2 id="五、趋势与实践" tabindex="-1">五、趋势与实践 <a class="header-anchor" href="#五、趋势与实践" aria-label="Permalink to “五、趋势与实践”">​</a></h2><ol><li><p><strong>云原生 CI/CD</strong></p><ul><li>以 GitHub Actions / GitLab CI/CD / CircleCI 为代表，CI/CD 服务化。</li><li>构建环境容器化（Docker in Docker、K8s Runner）。</li></ul></li><li><p><strong>移动端专用 CI/CD</strong></p><ul><li>iOS 需 macOS Runner（受苹果限制）。</li><li>Bitrise、Codemagic 成为移动开发首选。</li><li>自动化签名（fastlane match）、分发（TestFlight/Firebase）。</li></ul></li><li><p><strong>声明式流水线</strong></p><ul><li>YAML 配置化（GitHub Actions workflow、GitLab CI yml、CircleCI config）。</li><li>代码即流水线（Pipeline as Code）。</li></ul></li><li><p><strong>安全与供应链防护</strong></p><ul><li>签名、依赖扫描、制品库安全验证（SCA）。</li><li>典型方案：Snyk、Dependabot。</li></ul></li><li><p><strong>智能化与可观测性</strong></p><ul><li>自动缓存、并行构建、依赖图优化。</li><li>可视化 CI/CD Dashboard。</li><li>AI 驱动的构建优化与测试分析。</li></ul></li></ol><h2 id="六、总结" tabindex="-1">六、总结 <a class="header-anchor" href="#六、总结" aria-label="Permalink to “六、总结”">​</a></h2><ul><li><strong>CI</strong> 的目标：<strong>快速发现问题</strong>。</li><li><strong>CD</strong> 的目标：<strong>快速、安全、可重复地交付</strong>。</li><li>工具从 <strong>Jenkins（自托管） → Travis/Circle（SaaS） → GitHub Actions/GitLab（集成式） → 专用 CI/CD（Bitrise/Codemagic）</strong>。</li><li>在客户端领域，CI/CD 不仅意味着构建和测试，还包含 <strong>证书管理、签名、公证、商店分发</strong>，比服务端复杂。</li></ul><p>✅ 一句话总结： CI/CD 的本质是 <strong>把“代码 → 可用产物 → 可运行系统”这条链条自动化</strong>，其演化趋势是 <strong>云原生化、声明式、专用化（移动端）、安全化</strong>。</p><p>要不要我帮你画一个「客户端 vs 服务端 CI/CD 流水线差异表」？这样你能直观看到两者在 <strong>构建产物、分发方式、自动化程度</strong> 上的不同。</p>',18)])])}const c=i(n,[["render",s]]);export{p as __pageData,c as default};
